// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raft.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "raft.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace raft {
class vote_requestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<vote_request> {
} _vote_request_default_instance_;
class vote_responseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<vote_response> {
} _vote_response_default_instance_;
class log_entryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<log_entry> {
} _log_entry_default_instance_;
class replicate_log_entries_requestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<replicate_log_entries_request> {
} _replicate_log_entries_request_default_instance_;
class replicate_log_entries_responseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<replicate_log_entries_response> {
} _replicate_log_entries_response_default_instance_;
class snapshot_infoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<snapshot_info> {
} _snapshot_info_default_instance_;
class install_snapshot_requestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<install_snapshot_request> {
} _install_snapshot_request_default_instance_;
class install_snapshot_responseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<install_snapshot_response> {
} _install_snapshot_response_default_instance_;

namespace protobuf_raft_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[8];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vote_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vote_request, req_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vote_request, term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vote_request, candidate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vote_request, last_log_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vote_request, last_log_term_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vote_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vote_response, req_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vote_response, term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vote_response, vote_granted_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vote_response, log_ok_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_entry, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_entry, term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_entry, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(log_entry, log_data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(replicate_log_entries_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(replicate_log_entries_request, req_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(replicate_log_entries_request, term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(replicate_log_entries_request, leader_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(replicate_log_entries_request, prev_log_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(replicate_log_entries_request, prev_log_term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(replicate_log_entries_request, leader_commit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(replicate_log_entries_request, entries_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(replicate_log_entries_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(replicate_log_entries_response, req_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(replicate_log_entries_response, term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(replicate_log_entries_response, last_log_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(replicate_log_entries_response, success_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(snapshot_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(snapshot_info, last_snapshot_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(snapshot_info, last_included_term_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(install_snapshot_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(install_snapshot_request, req_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(install_snapshot_request, term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(install_snapshot_request, snapshot_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(install_snapshot_request, offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(install_snapshot_request, done_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(install_snapshot_request, leader_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(install_snapshot_request, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(install_snapshot_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(install_snapshot_response, req_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(install_snapshot_response, term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(install_snapshot_response, bytes_stored_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(vote_request)},
  { 9, -1, sizeof(vote_response)},
  { 17, -1, sizeof(log_entry)},
  { 25, -1, sizeof(replicate_log_entries_request)},
  { 36, -1, sizeof(replicate_log_entries_response)},
  { 44, -1, sizeof(snapshot_info)},
  { 50, -1, sizeof(install_snapshot_request)},
  { 61, -1, sizeof(install_snapshot_response)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_vote_request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_vote_response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_log_entry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_replicate_log_entries_request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_replicate_log_entries_response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_snapshot_info_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_install_snapshot_request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_install_snapshot_response_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "raft.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 8);
}

}  // namespace

void TableStruct::Shutdown() {
  _vote_request_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _vote_response_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _log_entry_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _replicate_log_entries_request_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _replicate_log_entries_response_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _snapshot_info_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _install_snapshot_request_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _install_snapshot_response_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _vote_request_default_instance_.DefaultConstruct();
  _vote_response_default_instance_.DefaultConstruct();
  _log_entry_default_instance_.DefaultConstruct();
  _replicate_log_entries_request_default_instance_.DefaultConstruct();
  _replicate_log_entries_response_default_instance_.DefaultConstruct();
  _snapshot_info_default_instance_.DefaultConstruct();
  _install_snapshot_request_default_instance_.DefaultConstruct();
  _install_snapshot_response_default_instance_.DefaultConstruct();
  _install_snapshot_request_default_instance_.get_mutable()->snapshot_info_ = const_cast< ::raft::snapshot_info*>(
      ::raft::snapshot_info::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\nraft.proto\022\004raft\"n\n\014vote_request\022\016\n\006re"
      "q_id\030\001 \001(\004\022\014\n\004term\030\002 \001(\004\022\021\n\tcandidate\030\003 "
      "\001(\t\022\026\n\016last_log_index\030\004 \001(\004\022\025\n\rlast_log_"
      "term\030\005 \001(\004\"S\n\rvote_response\022\016\n\006req_id\030\001 "
      "\001(\004\022\014\n\004term\030\002 \001(\004\022\024\n\014vote_granted\030\003 \001(\010\022"
      "\016\n\006log_ok\030\004 \001(\010\"^\n\tlog_entry\022\r\n\005index\030\001 "
      "\001(\004\022\014\n\004term\030\002 \001(\004\022\"\n\004type\030\003 \001(\0162\024.raft.l"
      "og_entry_type\022\020\n\010log_data\030\004 \001(\t\"\270\001\n\035repl"
      "icate_log_entries_request\022\016\n\006req_id\030\001 \001("
      "\004\022\014\n\004term\030\002 \001(\004\022\021\n\tleader_id\030\003 \001(\t\022\026\n\016pr"
      "ev_log_index\030\004 \001(\004\022\025\n\rprev_log_term\030\005 \001("
      "\004\022\025\n\rleader_commit\030\006 \001(\004\022 \n\007entries\030\007 \003("
      "\0132\017.raft.log_entry\"g\n\036replicate_log_entr"
      "ies_response\022\016\n\006req_id\030\001 \001(\004\022\014\n\004term\030\002 \001"
      "(\004\022\026\n\016last_log_index\030\003 \001(\004\022\017\n\007success\030\004 "
      "\001(\010\"H\n\rsnapshot_info\022\033\n\023last_snapshot_in"
      "dex\030\001 \001(\006\022\032\n\022last_included_term\030\002 \001(\006\"\243\001"
      "\n\030install_snapshot_request\022\016\n\006req_id\030\001 \001"
      "(\004\022\014\n\004term\030\002 \001(\004\022*\n\rsnapshot_info\030\003 \001(\0132"
      "\023.raft.snapshot_info\022\016\n\006offset\030\004 \001(\004\022\014\n\004"
      "done\030\005 \001(\010\022\021\n\tleader_id\030\006 \001(\t\022\014\n\004data\030\007 "
      "\001(\t\"O\n\031install_snapshot_response\022\016\n\006req_"
      "id\030\001 \001(\004\022\014\n\004term\030\002 \001(\004\022\024\n\014bytes_stored\030\003"
      " \001(\004*5\n\016log_entry_type\022\016\n\ne_raft_log\020\000\022\023"
      "\n\017e_configuration\020\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 987);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "raft.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_raft_2eproto

const ::google::protobuf::EnumDescriptor* log_entry_type_descriptor() {
  protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_raft_2eproto::file_level_enum_descriptors[0];
}
bool log_entry_type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int vote_request::kReqIdFieldNumber;
const int vote_request::kTermFieldNumber;
const int vote_request::kCandidateFieldNumber;
const int vote_request::kLastLogIndexFieldNumber;
const int vote_request::kLastLogTermFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

vote_request::vote_request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_raft_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft.vote_request)
}
vote_request::vote_request(const vote_request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  candidate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.candidate().size() > 0) {
    candidate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.candidate_);
  }
  ::memcpy(&req_id_, &from.req_id_,
    reinterpret_cast<char*>(&last_log_term_) -
    reinterpret_cast<char*>(&req_id_) + sizeof(last_log_term_));
  // @@protoc_insertion_point(copy_constructor:raft.vote_request)
}

void vote_request::SharedCtor() {
  candidate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&req_id_, 0, reinterpret_cast<char*>(&last_log_term_) -
    reinterpret_cast<char*>(&req_id_) + sizeof(last_log_term_));
  _cached_size_ = 0;
}

vote_request::~vote_request() {
  // @@protoc_insertion_point(destructor:raft.vote_request)
  SharedDtor();
}

void vote_request::SharedDtor() {
  candidate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void vote_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* vote_request::descriptor() {
  protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_raft_2eproto::file_level_metadata[0].descriptor;
}

const vote_request& vote_request::default_instance() {
  protobuf_raft_2eproto::InitDefaults();
  return *internal_default_instance();
}

vote_request* vote_request::New(::google::protobuf::Arena* arena) const {
  vote_request* n = new vote_request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void vote_request::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.vote_request)
  candidate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&req_id_, 0, reinterpret_cast<char*>(&last_log_term_) -
    reinterpret_cast<char*>(&req_id_) + sizeof(last_log_term_));
}

bool vote_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft.vote_request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 req_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &req_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 term = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string candidate = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_candidate()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->candidate().data(), this->candidate().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "raft.vote_request.candidate"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 last_log_index = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_log_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 last_log_term = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_log_term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft.vote_request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft.vote_request)
  return false;
#undef DO_
}

void vote_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft.vote_request)
  // uint64 req_id = 1;
  if (this->req_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->req_id(), output);
  }

  // uint64 term = 2;
  if (this->term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->term(), output);
  }

  // string candidate = 3;
  if (this->candidate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->candidate().data(), this->candidate().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "raft.vote_request.candidate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->candidate(), output);
  }

  // uint64 last_log_index = 4;
  if (this->last_log_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->last_log_index(), output);
  }

  // uint64 last_log_term = 5;
  if (this->last_log_term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->last_log_term(), output);
  }

  // @@protoc_insertion_point(serialize_end:raft.vote_request)
}

::google::protobuf::uint8* vote_request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft.vote_request)
  // uint64 req_id = 1;
  if (this->req_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->req_id(), target);
  }

  // uint64 term = 2;
  if (this->term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->term(), target);
  }

  // string candidate = 3;
  if (this->candidate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->candidate().data(), this->candidate().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "raft.vote_request.candidate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->candidate(), target);
  }

  // uint64 last_log_index = 4;
  if (this->last_log_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->last_log_index(), target);
  }

  // uint64 last_log_term = 5;
  if (this->last_log_term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->last_log_term(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:raft.vote_request)
  return target;
}

size_t vote_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.vote_request)
  size_t total_size = 0;

  // string candidate = 3;
  if (this->candidate().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->candidate());
  }

  // uint64 req_id = 1;
  if (this->req_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->req_id());
  }

  // uint64 term = 2;
  if (this->term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->term());
  }

  // uint64 last_log_index = 4;
  if (this->last_log_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->last_log_index());
  }

  // uint64 last_log_term = 5;
  if (this->last_log_term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->last_log_term());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void vote_request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft.vote_request)
  GOOGLE_DCHECK_NE(&from, this);
  const vote_request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const vote_request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft.vote_request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft.vote_request)
    MergeFrom(*source);
  }
}

void vote_request::MergeFrom(const vote_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft.vote_request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.candidate().size() > 0) {

    candidate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.candidate_);
  }
  if (from.req_id() != 0) {
    set_req_id(from.req_id());
  }
  if (from.term() != 0) {
    set_term(from.term());
  }
  if (from.last_log_index() != 0) {
    set_last_log_index(from.last_log_index());
  }
  if (from.last_log_term() != 0) {
    set_last_log_term(from.last_log_term());
  }
}

void vote_request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft.vote_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void vote_request::CopyFrom(const vote_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.vote_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool vote_request::IsInitialized() const {
  return true;
}

void vote_request::Swap(vote_request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void vote_request::InternalSwap(vote_request* other) {
  candidate_.Swap(&other->candidate_);
  std::swap(req_id_, other->req_id_);
  std::swap(term_, other->term_);
  std::swap(last_log_index_, other->last_log_index_);
  std::swap(last_log_term_, other->last_log_term_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata vote_request::GetMetadata() const {
  protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_raft_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// vote_request

// uint64 req_id = 1;
void vote_request::clear_req_id() {
  req_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 vote_request::req_id() const {
  // @@protoc_insertion_point(field_get:raft.vote_request.req_id)
  return req_id_;
}
void vote_request::set_req_id(::google::protobuf::uint64 value) {
  
  req_id_ = value;
  // @@protoc_insertion_point(field_set:raft.vote_request.req_id)
}

// uint64 term = 2;
void vote_request::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 vote_request::term() const {
  // @@protoc_insertion_point(field_get:raft.vote_request.term)
  return term_;
}
void vote_request::set_term(::google::protobuf::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:raft.vote_request.term)
}

// string candidate = 3;
void vote_request::clear_candidate() {
  candidate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& vote_request::candidate() const {
  // @@protoc_insertion_point(field_get:raft.vote_request.candidate)
  return candidate_.GetNoArena();
}
void vote_request::set_candidate(const ::std::string& value) {
  
  candidate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft.vote_request.candidate)
}
#if LANG_CXX11
void vote_request::set_candidate(::std::string&& value) {
  
  candidate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raft.vote_request.candidate)
}
#endif
void vote_request::set_candidate(const char* value) {
  
  candidate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft.vote_request.candidate)
}
void vote_request::set_candidate(const char* value, size_t size) {
  
  candidate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft.vote_request.candidate)
}
::std::string* vote_request::mutable_candidate() {
  
  // @@protoc_insertion_point(field_mutable:raft.vote_request.candidate)
  return candidate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* vote_request::release_candidate() {
  // @@protoc_insertion_point(field_release:raft.vote_request.candidate)
  
  return candidate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void vote_request::set_allocated_candidate(::std::string* candidate) {
  if (candidate != NULL) {
    
  } else {
    
  }
  candidate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), candidate);
  // @@protoc_insertion_point(field_set_allocated:raft.vote_request.candidate)
}

// uint64 last_log_index = 4;
void vote_request::clear_last_log_index() {
  last_log_index_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 vote_request::last_log_index() const {
  // @@protoc_insertion_point(field_get:raft.vote_request.last_log_index)
  return last_log_index_;
}
void vote_request::set_last_log_index(::google::protobuf::uint64 value) {
  
  last_log_index_ = value;
  // @@protoc_insertion_point(field_set:raft.vote_request.last_log_index)
}

// uint64 last_log_term = 5;
void vote_request::clear_last_log_term() {
  last_log_term_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 vote_request::last_log_term() const {
  // @@protoc_insertion_point(field_get:raft.vote_request.last_log_term)
  return last_log_term_;
}
void vote_request::set_last_log_term(::google::protobuf::uint64 value) {
  
  last_log_term_ = value;
  // @@protoc_insertion_point(field_set:raft.vote_request.last_log_term)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int vote_response::kReqIdFieldNumber;
const int vote_response::kTermFieldNumber;
const int vote_response::kVoteGrantedFieldNumber;
const int vote_response::kLogOkFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

vote_response::vote_response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_raft_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft.vote_response)
}
vote_response::vote_response(const vote_response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&req_id_, &from.req_id_,
    reinterpret_cast<char*>(&log_ok_) -
    reinterpret_cast<char*>(&req_id_) + sizeof(log_ok_));
  // @@protoc_insertion_point(copy_constructor:raft.vote_response)
}

void vote_response::SharedCtor() {
  ::memset(&req_id_, 0, reinterpret_cast<char*>(&log_ok_) -
    reinterpret_cast<char*>(&req_id_) + sizeof(log_ok_));
  _cached_size_ = 0;
}

vote_response::~vote_response() {
  // @@protoc_insertion_point(destructor:raft.vote_response)
  SharedDtor();
}

void vote_response::SharedDtor() {
}

void vote_response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* vote_response::descriptor() {
  protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_raft_2eproto::file_level_metadata[1].descriptor;
}

const vote_response& vote_response::default_instance() {
  protobuf_raft_2eproto::InitDefaults();
  return *internal_default_instance();
}

vote_response* vote_response::New(::google::protobuf::Arena* arena) const {
  vote_response* n = new vote_response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void vote_response::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.vote_response)
  ::memset(&req_id_, 0, reinterpret_cast<char*>(&log_ok_) -
    reinterpret_cast<char*>(&req_id_) + sizeof(log_ok_));
}

bool vote_response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft.vote_response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 req_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &req_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 term = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool vote_granted = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &vote_granted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool log_ok = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &log_ok_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft.vote_response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft.vote_response)
  return false;
#undef DO_
}

void vote_response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft.vote_response)
  // uint64 req_id = 1;
  if (this->req_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->req_id(), output);
  }

  // uint64 term = 2;
  if (this->term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->term(), output);
  }

  // bool vote_granted = 3;
  if (this->vote_granted() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->vote_granted(), output);
  }

  // bool log_ok = 4;
  if (this->log_ok() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->log_ok(), output);
  }

  // @@protoc_insertion_point(serialize_end:raft.vote_response)
}

::google::protobuf::uint8* vote_response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft.vote_response)
  // uint64 req_id = 1;
  if (this->req_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->req_id(), target);
  }

  // uint64 term = 2;
  if (this->term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->term(), target);
  }

  // bool vote_granted = 3;
  if (this->vote_granted() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->vote_granted(), target);
  }

  // bool log_ok = 4;
  if (this->log_ok() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->log_ok(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:raft.vote_response)
  return target;
}

size_t vote_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.vote_response)
  size_t total_size = 0;

  // uint64 req_id = 1;
  if (this->req_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->req_id());
  }

  // uint64 term = 2;
  if (this->term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->term());
  }

  // bool vote_granted = 3;
  if (this->vote_granted() != 0) {
    total_size += 1 + 1;
  }

  // bool log_ok = 4;
  if (this->log_ok() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void vote_response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft.vote_response)
  GOOGLE_DCHECK_NE(&from, this);
  const vote_response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const vote_response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft.vote_response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft.vote_response)
    MergeFrom(*source);
  }
}

void vote_response::MergeFrom(const vote_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft.vote_response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.req_id() != 0) {
    set_req_id(from.req_id());
  }
  if (from.term() != 0) {
    set_term(from.term());
  }
  if (from.vote_granted() != 0) {
    set_vote_granted(from.vote_granted());
  }
  if (from.log_ok() != 0) {
    set_log_ok(from.log_ok());
  }
}

void vote_response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft.vote_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void vote_response::CopyFrom(const vote_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.vote_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool vote_response::IsInitialized() const {
  return true;
}

void vote_response::Swap(vote_response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void vote_response::InternalSwap(vote_response* other) {
  std::swap(req_id_, other->req_id_);
  std::swap(term_, other->term_);
  std::swap(vote_granted_, other->vote_granted_);
  std::swap(log_ok_, other->log_ok_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata vote_response::GetMetadata() const {
  protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_raft_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// vote_response

// uint64 req_id = 1;
void vote_response::clear_req_id() {
  req_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 vote_response::req_id() const {
  // @@protoc_insertion_point(field_get:raft.vote_response.req_id)
  return req_id_;
}
void vote_response::set_req_id(::google::protobuf::uint64 value) {
  
  req_id_ = value;
  // @@protoc_insertion_point(field_set:raft.vote_response.req_id)
}

// uint64 term = 2;
void vote_response::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 vote_response::term() const {
  // @@protoc_insertion_point(field_get:raft.vote_response.term)
  return term_;
}
void vote_response::set_term(::google::protobuf::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:raft.vote_response.term)
}

// bool vote_granted = 3;
void vote_response::clear_vote_granted() {
  vote_granted_ = false;
}
bool vote_response::vote_granted() const {
  // @@protoc_insertion_point(field_get:raft.vote_response.vote_granted)
  return vote_granted_;
}
void vote_response::set_vote_granted(bool value) {
  
  vote_granted_ = value;
  // @@protoc_insertion_point(field_set:raft.vote_response.vote_granted)
}

// bool log_ok = 4;
void vote_response::clear_log_ok() {
  log_ok_ = false;
}
bool vote_response::log_ok() const {
  // @@protoc_insertion_point(field_get:raft.vote_response.log_ok)
  return log_ok_;
}
void vote_response::set_log_ok(bool value) {
  
  log_ok_ = value;
  // @@protoc_insertion_point(field_set:raft.vote_response.log_ok)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int log_entry::kIndexFieldNumber;
const int log_entry::kTermFieldNumber;
const int log_entry::kTypeFieldNumber;
const int log_entry::kLogDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

log_entry::log_entry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_raft_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft.log_entry)
}
log_entry::log_entry(const log_entry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  log_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.log_data().size() > 0) {
    log_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.log_data_);
  }
  ::memcpy(&index_, &from.index_,
    reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&index_) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:raft.log_entry)
}

void log_entry::SharedCtor() {
  log_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&index_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&index_) + sizeof(type_));
  _cached_size_ = 0;
}

log_entry::~log_entry() {
  // @@protoc_insertion_point(destructor:raft.log_entry)
  SharedDtor();
}

void log_entry::SharedDtor() {
  log_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void log_entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* log_entry::descriptor() {
  protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_raft_2eproto::file_level_metadata[2].descriptor;
}

const log_entry& log_entry::default_instance() {
  protobuf_raft_2eproto::InitDefaults();
  return *internal_default_instance();
}

log_entry* log_entry::New(::google::protobuf::Arena* arena) const {
  log_entry* n = new log_entry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void log_entry::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.log_entry)
  log_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&index_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&index_) + sizeof(type_));
}

bool log_entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft.log_entry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 term = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .raft.log_entry_type type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::raft::log_entry_type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string log_data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_log_data()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->log_data().data(), this->log_data().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "raft.log_entry.log_data"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft.log_entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft.log_entry)
  return false;
#undef DO_
}

void log_entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft.log_entry)
  // uint64 index = 1;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->index(), output);
  }

  // uint64 term = 2;
  if (this->term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->term(), output);
  }

  // .raft.log_entry_type type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // string log_data = 4;
  if (this->log_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->log_data().data(), this->log_data().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "raft.log_entry.log_data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->log_data(), output);
  }

  // @@protoc_insertion_point(serialize_end:raft.log_entry)
}

::google::protobuf::uint8* log_entry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft.log_entry)
  // uint64 index = 1;
  if (this->index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->index(), target);
  }

  // uint64 term = 2;
  if (this->term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->term(), target);
  }

  // .raft.log_entry_type type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // string log_data = 4;
  if (this->log_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->log_data().data(), this->log_data().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "raft.log_entry.log_data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->log_data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:raft.log_entry)
  return target;
}

size_t log_entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.log_entry)
  size_t total_size = 0;

  // string log_data = 4;
  if (this->log_data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->log_data());
  }

  // uint64 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->index());
  }

  // uint64 term = 2;
  if (this->term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->term());
  }

  // .raft.log_entry_type type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void log_entry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft.log_entry)
  GOOGLE_DCHECK_NE(&from, this);
  const log_entry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const log_entry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft.log_entry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft.log_entry)
    MergeFrom(*source);
  }
}

void log_entry::MergeFrom(const log_entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft.log_entry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.log_data().size() > 0) {

    log_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.log_data_);
  }
  if (from.index() != 0) {
    set_index(from.index());
  }
  if (from.term() != 0) {
    set_term(from.term());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void log_entry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft.log_entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void log_entry::CopyFrom(const log_entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.log_entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool log_entry::IsInitialized() const {
  return true;
}

void log_entry::Swap(log_entry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void log_entry::InternalSwap(log_entry* other) {
  log_data_.Swap(&other->log_data_);
  std::swap(index_, other->index_);
  std::swap(term_, other->term_);
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata log_entry::GetMetadata() const {
  protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_raft_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// log_entry

// uint64 index = 1;
void log_entry::clear_index() {
  index_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 log_entry::index() const {
  // @@protoc_insertion_point(field_get:raft.log_entry.index)
  return index_;
}
void log_entry::set_index(::google::protobuf::uint64 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:raft.log_entry.index)
}

// uint64 term = 2;
void log_entry::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 log_entry::term() const {
  // @@protoc_insertion_point(field_get:raft.log_entry.term)
  return term_;
}
void log_entry::set_term(::google::protobuf::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:raft.log_entry.term)
}

// .raft.log_entry_type type = 3;
void log_entry::clear_type() {
  type_ = 0;
}
::raft::log_entry_type log_entry::type() const {
  // @@protoc_insertion_point(field_get:raft.log_entry.type)
  return static_cast< ::raft::log_entry_type >(type_);
}
void log_entry::set_type(::raft::log_entry_type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:raft.log_entry.type)
}

// string log_data = 4;
void log_entry::clear_log_data() {
  log_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& log_entry::log_data() const {
  // @@protoc_insertion_point(field_get:raft.log_entry.log_data)
  return log_data_.GetNoArena();
}
void log_entry::set_log_data(const ::std::string& value) {
  
  log_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft.log_entry.log_data)
}
#if LANG_CXX11
void log_entry::set_log_data(::std::string&& value) {
  
  log_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raft.log_entry.log_data)
}
#endif
void log_entry::set_log_data(const char* value) {
  
  log_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft.log_entry.log_data)
}
void log_entry::set_log_data(const char* value, size_t size) {
  
  log_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft.log_entry.log_data)
}
::std::string* log_entry::mutable_log_data() {
  
  // @@protoc_insertion_point(field_mutable:raft.log_entry.log_data)
  return log_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* log_entry::release_log_data() {
  // @@protoc_insertion_point(field_release:raft.log_entry.log_data)
  
  return log_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void log_entry::set_allocated_log_data(::std::string* log_data) {
  if (log_data != NULL) {
    
  } else {
    
  }
  log_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), log_data);
  // @@protoc_insertion_point(field_set_allocated:raft.log_entry.log_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int replicate_log_entries_request::kReqIdFieldNumber;
const int replicate_log_entries_request::kTermFieldNumber;
const int replicate_log_entries_request::kLeaderIdFieldNumber;
const int replicate_log_entries_request::kPrevLogIndexFieldNumber;
const int replicate_log_entries_request::kPrevLogTermFieldNumber;
const int replicate_log_entries_request::kLeaderCommitFieldNumber;
const int replicate_log_entries_request::kEntriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

replicate_log_entries_request::replicate_log_entries_request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_raft_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft.replicate_log_entries_request)
}
replicate_log_entries_request::replicate_log_entries_request(const replicate_log_entries_request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      entries_(from.entries_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  leader_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.leader_id().size() > 0) {
    leader_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.leader_id_);
  }
  ::memcpy(&req_id_, &from.req_id_,
    reinterpret_cast<char*>(&leader_commit_) -
    reinterpret_cast<char*>(&req_id_) + sizeof(leader_commit_));
  // @@protoc_insertion_point(copy_constructor:raft.replicate_log_entries_request)
}

void replicate_log_entries_request::SharedCtor() {
  leader_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&req_id_, 0, reinterpret_cast<char*>(&leader_commit_) -
    reinterpret_cast<char*>(&req_id_) + sizeof(leader_commit_));
  _cached_size_ = 0;
}

replicate_log_entries_request::~replicate_log_entries_request() {
  // @@protoc_insertion_point(destructor:raft.replicate_log_entries_request)
  SharedDtor();
}

void replicate_log_entries_request::SharedDtor() {
  leader_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void replicate_log_entries_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* replicate_log_entries_request::descriptor() {
  protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_raft_2eproto::file_level_metadata[3].descriptor;
}

const replicate_log_entries_request& replicate_log_entries_request::default_instance() {
  protobuf_raft_2eproto::InitDefaults();
  return *internal_default_instance();
}

replicate_log_entries_request* replicate_log_entries_request::New(::google::protobuf::Arena* arena) const {
  replicate_log_entries_request* n = new replicate_log_entries_request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void replicate_log_entries_request::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.replicate_log_entries_request)
  entries_.Clear();
  leader_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&req_id_, 0, reinterpret_cast<char*>(&leader_commit_) -
    reinterpret_cast<char*>(&req_id_) + sizeof(leader_commit_));
}

bool replicate_log_entries_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft.replicate_log_entries_request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 req_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &req_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 term = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string leader_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leader_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->leader_id().data(), this->leader_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "raft.replicate_log_entries_request.leader_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 prev_log_index = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &prev_log_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 prev_log_term = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &prev_log_term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 leader_commit = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &leader_commit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .raft.log_entry entries = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft.replicate_log_entries_request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft.replicate_log_entries_request)
  return false;
#undef DO_
}

void replicate_log_entries_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft.replicate_log_entries_request)
  // uint64 req_id = 1;
  if (this->req_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->req_id(), output);
  }

  // uint64 term = 2;
  if (this->term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->term(), output);
  }

  // string leader_id = 3;
  if (this->leader_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->leader_id().data(), this->leader_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "raft.replicate_log_entries_request.leader_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->leader_id(), output);
  }

  // uint64 prev_log_index = 4;
  if (this->prev_log_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->prev_log_index(), output);
  }

  // uint64 prev_log_term = 5;
  if (this->prev_log_term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->prev_log_term(), output);
  }

  // uint64 leader_commit = 6;
  if (this->leader_commit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->leader_commit(), output);
  }

  // repeated .raft.log_entry entries = 7;
  for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->entries(i), output);
  }

  // @@protoc_insertion_point(serialize_end:raft.replicate_log_entries_request)
}

::google::protobuf::uint8* replicate_log_entries_request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft.replicate_log_entries_request)
  // uint64 req_id = 1;
  if (this->req_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->req_id(), target);
  }

  // uint64 term = 2;
  if (this->term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->term(), target);
  }

  // string leader_id = 3;
  if (this->leader_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->leader_id().data(), this->leader_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "raft.replicate_log_entries_request.leader_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->leader_id(), target);
  }

  // uint64 prev_log_index = 4;
  if (this->prev_log_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->prev_log_index(), target);
  }

  // uint64 prev_log_term = 5;
  if (this->prev_log_term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->prev_log_term(), target);
  }

  // uint64 leader_commit = 6;
  if (this->leader_commit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->leader_commit(), target);
  }

  // repeated .raft.log_entry entries = 7;
  for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->entries(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:raft.replicate_log_entries_request)
  return target;
}

size_t replicate_log_entries_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.replicate_log_entries_request)
  size_t total_size = 0;

  // repeated .raft.log_entry entries = 7;
  {
    unsigned int count = this->entries_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->entries(i));
    }
  }

  // string leader_id = 3;
  if (this->leader_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->leader_id());
  }

  // uint64 req_id = 1;
  if (this->req_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->req_id());
  }

  // uint64 term = 2;
  if (this->term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->term());
  }

  // uint64 prev_log_index = 4;
  if (this->prev_log_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->prev_log_index());
  }

  // uint64 prev_log_term = 5;
  if (this->prev_log_term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->prev_log_term());
  }

  // uint64 leader_commit = 6;
  if (this->leader_commit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->leader_commit());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void replicate_log_entries_request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft.replicate_log_entries_request)
  GOOGLE_DCHECK_NE(&from, this);
  const replicate_log_entries_request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const replicate_log_entries_request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft.replicate_log_entries_request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft.replicate_log_entries_request)
    MergeFrom(*source);
  }
}

void replicate_log_entries_request::MergeFrom(const replicate_log_entries_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft.replicate_log_entries_request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  entries_.MergeFrom(from.entries_);
  if (from.leader_id().size() > 0) {

    leader_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.leader_id_);
  }
  if (from.req_id() != 0) {
    set_req_id(from.req_id());
  }
  if (from.term() != 0) {
    set_term(from.term());
  }
  if (from.prev_log_index() != 0) {
    set_prev_log_index(from.prev_log_index());
  }
  if (from.prev_log_term() != 0) {
    set_prev_log_term(from.prev_log_term());
  }
  if (from.leader_commit() != 0) {
    set_leader_commit(from.leader_commit());
  }
}

void replicate_log_entries_request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft.replicate_log_entries_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void replicate_log_entries_request::CopyFrom(const replicate_log_entries_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.replicate_log_entries_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool replicate_log_entries_request::IsInitialized() const {
  return true;
}

void replicate_log_entries_request::Swap(replicate_log_entries_request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void replicate_log_entries_request::InternalSwap(replicate_log_entries_request* other) {
  entries_.UnsafeArenaSwap(&other->entries_);
  leader_id_.Swap(&other->leader_id_);
  std::swap(req_id_, other->req_id_);
  std::swap(term_, other->term_);
  std::swap(prev_log_index_, other->prev_log_index_);
  std::swap(prev_log_term_, other->prev_log_term_);
  std::swap(leader_commit_, other->leader_commit_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata replicate_log_entries_request::GetMetadata() const {
  protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_raft_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// replicate_log_entries_request

// uint64 req_id = 1;
void replicate_log_entries_request::clear_req_id() {
  req_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 replicate_log_entries_request::req_id() const {
  // @@protoc_insertion_point(field_get:raft.replicate_log_entries_request.req_id)
  return req_id_;
}
void replicate_log_entries_request::set_req_id(::google::protobuf::uint64 value) {
  
  req_id_ = value;
  // @@protoc_insertion_point(field_set:raft.replicate_log_entries_request.req_id)
}

// uint64 term = 2;
void replicate_log_entries_request::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 replicate_log_entries_request::term() const {
  // @@protoc_insertion_point(field_get:raft.replicate_log_entries_request.term)
  return term_;
}
void replicate_log_entries_request::set_term(::google::protobuf::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:raft.replicate_log_entries_request.term)
}

// string leader_id = 3;
void replicate_log_entries_request::clear_leader_id() {
  leader_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& replicate_log_entries_request::leader_id() const {
  // @@protoc_insertion_point(field_get:raft.replicate_log_entries_request.leader_id)
  return leader_id_.GetNoArena();
}
void replicate_log_entries_request::set_leader_id(const ::std::string& value) {
  
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft.replicate_log_entries_request.leader_id)
}
#if LANG_CXX11
void replicate_log_entries_request::set_leader_id(::std::string&& value) {
  
  leader_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raft.replicate_log_entries_request.leader_id)
}
#endif
void replicate_log_entries_request::set_leader_id(const char* value) {
  
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft.replicate_log_entries_request.leader_id)
}
void replicate_log_entries_request::set_leader_id(const char* value, size_t size) {
  
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft.replicate_log_entries_request.leader_id)
}
::std::string* replicate_log_entries_request::mutable_leader_id() {
  
  // @@protoc_insertion_point(field_mutable:raft.replicate_log_entries_request.leader_id)
  return leader_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* replicate_log_entries_request::release_leader_id() {
  // @@protoc_insertion_point(field_release:raft.replicate_log_entries_request.leader_id)
  
  return leader_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void replicate_log_entries_request::set_allocated_leader_id(::std::string* leader_id) {
  if (leader_id != NULL) {
    
  } else {
    
  }
  leader_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), leader_id);
  // @@protoc_insertion_point(field_set_allocated:raft.replicate_log_entries_request.leader_id)
}

// uint64 prev_log_index = 4;
void replicate_log_entries_request::clear_prev_log_index() {
  prev_log_index_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 replicate_log_entries_request::prev_log_index() const {
  // @@protoc_insertion_point(field_get:raft.replicate_log_entries_request.prev_log_index)
  return prev_log_index_;
}
void replicate_log_entries_request::set_prev_log_index(::google::protobuf::uint64 value) {
  
  prev_log_index_ = value;
  // @@protoc_insertion_point(field_set:raft.replicate_log_entries_request.prev_log_index)
}

// uint64 prev_log_term = 5;
void replicate_log_entries_request::clear_prev_log_term() {
  prev_log_term_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 replicate_log_entries_request::prev_log_term() const {
  // @@protoc_insertion_point(field_get:raft.replicate_log_entries_request.prev_log_term)
  return prev_log_term_;
}
void replicate_log_entries_request::set_prev_log_term(::google::protobuf::uint64 value) {
  
  prev_log_term_ = value;
  // @@protoc_insertion_point(field_set:raft.replicate_log_entries_request.prev_log_term)
}

// uint64 leader_commit = 6;
void replicate_log_entries_request::clear_leader_commit() {
  leader_commit_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 replicate_log_entries_request::leader_commit() const {
  // @@protoc_insertion_point(field_get:raft.replicate_log_entries_request.leader_commit)
  return leader_commit_;
}
void replicate_log_entries_request::set_leader_commit(::google::protobuf::uint64 value) {
  
  leader_commit_ = value;
  // @@protoc_insertion_point(field_set:raft.replicate_log_entries_request.leader_commit)
}

// repeated .raft.log_entry entries = 7;
int replicate_log_entries_request::entries_size() const {
  return entries_.size();
}
void replicate_log_entries_request::clear_entries() {
  entries_.Clear();
}
const ::raft::log_entry& replicate_log_entries_request::entries(int index) const {
  // @@protoc_insertion_point(field_get:raft.replicate_log_entries_request.entries)
  return entries_.Get(index);
}
::raft::log_entry* replicate_log_entries_request::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:raft.replicate_log_entries_request.entries)
  return entries_.Mutable(index);
}
::raft::log_entry* replicate_log_entries_request::add_entries() {
  // @@protoc_insertion_point(field_add:raft.replicate_log_entries_request.entries)
  return entries_.Add();
}
::google::protobuf::RepeatedPtrField< ::raft::log_entry >*
replicate_log_entries_request::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:raft.replicate_log_entries_request.entries)
  return &entries_;
}
const ::google::protobuf::RepeatedPtrField< ::raft::log_entry >&
replicate_log_entries_request::entries() const {
  // @@protoc_insertion_point(field_list:raft.replicate_log_entries_request.entries)
  return entries_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int replicate_log_entries_response::kReqIdFieldNumber;
const int replicate_log_entries_response::kTermFieldNumber;
const int replicate_log_entries_response::kLastLogIndexFieldNumber;
const int replicate_log_entries_response::kSuccessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

replicate_log_entries_response::replicate_log_entries_response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_raft_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft.replicate_log_entries_response)
}
replicate_log_entries_response::replicate_log_entries_response(const replicate_log_entries_response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&req_id_, &from.req_id_,
    reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&req_id_) + sizeof(success_));
  // @@protoc_insertion_point(copy_constructor:raft.replicate_log_entries_response)
}

void replicate_log_entries_response::SharedCtor() {
  ::memset(&req_id_, 0, reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&req_id_) + sizeof(success_));
  _cached_size_ = 0;
}

replicate_log_entries_response::~replicate_log_entries_response() {
  // @@protoc_insertion_point(destructor:raft.replicate_log_entries_response)
  SharedDtor();
}

void replicate_log_entries_response::SharedDtor() {
}

void replicate_log_entries_response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* replicate_log_entries_response::descriptor() {
  protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_raft_2eproto::file_level_metadata[4].descriptor;
}

const replicate_log_entries_response& replicate_log_entries_response::default_instance() {
  protobuf_raft_2eproto::InitDefaults();
  return *internal_default_instance();
}

replicate_log_entries_response* replicate_log_entries_response::New(::google::protobuf::Arena* arena) const {
  replicate_log_entries_response* n = new replicate_log_entries_response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void replicate_log_entries_response::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.replicate_log_entries_response)
  ::memset(&req_id_, 0, reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&req_id_) + sizeof(success_));
}

bool replicate_log_entries_response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft.replicate_log_entries_response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 req_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &req_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 term = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 last_log_index = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_log_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool success = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft.replicate_log_entries_response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft.replicate_log_entries_response)
  return false;
#undef DO_
}

void replicate_log_entries_response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft.replicate_log_entries_response)
  // uint64 req_id = 1;
  if (this->req_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->req_id(), output);
  }

  // uint64 term = 2;
  if (this->term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->term(), output);
  }

  // uint64 last_log_index = 3;
  if (this->last_log_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->last_log_index(), output);
  }

  // bool success = 4;
  if (this->success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->success(), output);
  }

  // @@protoc_insertion_point(serialize_end:raft.replicate_log_entries_response)
}

::google::protobuf::uint8* replicate_log_entries_response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft.replicate_log_entries_response)
  // uint64 req_id = 1;
  if (this->req_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->req_id(), target);
  }

  // uint64 term = 2;
  if (this->term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->term(), target);
  }

  // uint64 last_log_index = 3;
  if (this->last_log_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->last_log_index(), target);
  }

  // bool success = 4;
  if (this->success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->success(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:raft.replicate_log_entries_response)
  return target;
}

size_t replicate_log_entries_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.replicate_log_entries_response)
  size_t total_size = 0;

  // uint64 req_id = 1;
  if (this->req_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->req_id());
  }

  // uint64 term = 2;
  if (this->term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->term());
  }

  // uint64 last_log_index = 3;
  if (this->last_log_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->last_log_index());
  }

  // bool success = 4;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void replicate_log_entries_response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft.replicate_log_entries_response)
  GOOGLE_DCHECK_NE(&from, this);
  const replicate_log_entries_response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const replicate_log_entries_response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft.replicate_log_entries_response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft.replicate_log_entries_response)
    MergeFrom(*source);
  }
}

void replicate_log_entries_response::MergeFrom(const replicate_log_entries_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft.replicate_log_entries_response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.req_id() != 0) {
    set_req_id(from.req_id());
  }
  if (from.term() != 0) {
    set_term(from.term());
  }
  if (from.last_log_index() != 0) {
    set_last_log_index(from.last_log_index());
  }
  if (from.success() != 0) {
    set_success(from.success());
  }
}

void replicate_log_entries_response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft.replicate_log_entries_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void replicate_log_entries_response::CopyFrom(const replicate_log_entries_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.replicate_log_entries_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool replicate_log_entries_response::IsInitialized() const {
  return true;
}

void replicate_log_entries_response::Swap(replicate_log_entries_response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void replicate_log_entries_response::InternalSwap(replicate_log_entries_response* other) {
  std::swap(req_id_, other->req_id_);
  std::swap(term_, other->term_);
  std::swap(last_log_index_, other->last_log_index_);
  std::swap(success_, other->success_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata replicate_log_entries_response::GetMetadata() const {
  protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_raft_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// replicate_log_entries_response

// uint64 req_id = 1;
void replicate_log_entries_response::clear_req_id() {
  req_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 replicate_log_entries_response::req_id() const {
  // @@protoc_insertion_point(field_get:raft.replicate_log_entries_response.req_id)
  return req_id_;
}
void replicate_log_entries_response::set_req_id(::google::protobuf::uint64 value) {
  
  req_id_ = value;
  // @@protoc_insertion_point(field_set:raft.replicate_log_entries_response.req_id)
}

// uint64 term = 2;
void replicate_log_entries_response::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 replicate_log_entries_response::term() const {
  // @@protoc_insertion_point(field_get:raft.replicate_log_entries_response.term)
  return term_;
}
void replicate_log_entries_response::set_term(::google::protobuf::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:raft.replicate_log_entries_response.term)
}

// uint64 last_log_index = 3;
void replicate_log_entries_response::clear_last_log_index() {
  last_log_index_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 replicate_log_entries_response::last_log_index() const {
  // @@protoc_insertion_point(field_get:raft.replicate_log_entries_response.last_log_index)
  return last_log_index_;
}
void replicate_log_entries_response::set_last_log_index(::google::protobuf::uint64 value) {
  
  last_log_index_ = value;
  // @@protoc_insertion_point(field_set:raft.replicate_log_entries_response.last_log_index)
}

// bool success = 4;
void replicate_log_entries_response::clear_success() {
  success_ = false;
}
bool replicate_log_entries_response::success() const {
  // @@protoc_insertion_point(field_get:raft.replicate_log_entries_response.success)
  return success_;
}
void replicate_log_entries_response::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:raft.replicate_log_entries_response.success)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int snapshot_info::kLastSnapshotIndexFieldNumber;
const int snapshot_info::kLastIncludedTermFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

snapshot_info::snapshot_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_raft_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft.snapshot_info)
}
snapshot_info::snapshot_info(const snapshot_info& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&last_snapshot_index_, &from.last_snapshot_index_,
    reinterpret_cast<char*>(&last_included_term_) -
    reinterpret_cast<char*>(&last_snapshot_index_) + sizeof(last_included_term_));
  // @@protoc_insertion_point(copy_constructor:raft.snapshot_info)
}

void snapshot_info::SharedCtor() {
  ::memset(&last_snapshot_index_, 0, reinterpret_cast<char*>(&last_included_term_) -
    reinterpret_cast<char*>(&last_snapshot_index_) + sizeof(last_included_term_));
  _cached_size_ = 0;
}

snapshot_info::~snapshot_info() {
  // @@protoc_insertion_point(destructor:raft.snapshot_info)
  SharedDtor();
}

void snapshot_info::SharedDtor() {
}

void snapshot_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* snapshot_info::descriptor() {
  protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_raft_2eproto::file_level_metadata[5].descriptor;
}

const snapshot_info& snapshot_info::default_instance() {
  protobuf_raft_2eproto::InitDefaults();
  return *internal_default_instance();
}

snapshot_info* snapshot_info::New(::google::protobuf::Arena* arena) const {
  snapshot_info* n = new snapshot_info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void snapshot_info::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.snapshot_info)
  ::memset(&last_snapshot_index_, 0, reinterpret_cast<char*>(&last_included_term_) -
    reinterpret_cast<char*>(&last_snapshot_index_) + sizeof(last_included_term_));
}

bool snapshot_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft.snapshot_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // fixed64 last_snapshot_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &last_snapshot_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed64 last_included_term = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &last_included_term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft.snapshot_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft.snapshot_info)
  return false;
#undef DO_
}

void snapshot_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft.snapshot_info)
  // fixed64 last_snapshot_index = 1;
  if (this->last_snapshot_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->last_snapshot_index(), output);
  }

  // fixed64 last_included_term = 2;
  if (this->last_included_term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->last_included_term(), output);
  }

  // @@protoc_insertion_point(serialize_end:raft.snapshot_info)
}

::google::protobuf::uint8* snapshot_info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft.snapshot_info)
  // fixed64 last_snapshot_index = 1;
  if (this->last_snapshot_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->last_snapshot_index(), target);
  }

  // fixed64 last_included_term = 2;
  if (this->last_included_term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->last_included_term(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:raft.snapshot_info)
  return target;
}

size_t snapshot_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.snapshot_info)
  size_t total_size = 0;

  // fixed64 last_snapshot_index = 1;
  if (this->last_snapshot_index() != 0) {
    total_size += 1 + 8;
  }

  // fixed64 last_included_term = 2;
  if (this->last_included_term() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void snapshot_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft.snapshot_info)
  GOOGLE_DCHECK_NE(&from, this);
  const snapshot_info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const snapshot_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft.snapshot_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft.snapshot_info)
    MergeFrom(*source);
  }
}

void snapshot_info::MergeFrom(const snapshot_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft.snapshot_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.last_snapshot_index() != 0) {
    set_last_snapshot_index(from.last_snapshot_index());
  }
  if (from.last_included_term() != 0) {
    set_last_included_term(from.last_included_term());
  }
}

void snapshot_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft.snapshot_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void snapshot_info::CopyFrom(const snapshot_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.snapshot_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool snapshot_info::IsInitialized() const {
  return true;
}

void snapshot_info::Swap(snapshot_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void snapshot_info::InternalSwap(snapshot_info* other) {
  std::swap(last_snapshot_index_, other->last_snapshot_index_);
  std::swap(last_included_term_, other->last_included_term_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata snapshot_info::GetMetadata() const {
  protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_raft_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// snapshot_info

// fixed64 last_snapshot_index = 1;
void snapshot_info::clear_last_snapshot_index() {
  last_snapshot_index_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 snapshot_info::last_snapshot_index() const {
  // @@protoc_insertion_point(field_get:raft.snapshot_info.last_snapshot_index)
  return last_snapshot_index_;
}
void snapshot_info::set_last_snapshot_index(::google::protobuf::uint64 value) {
  
  last_snapshot_index_ = value;
  // @@protoc_insertion_point(field_set:raft.snapshot_info.last_snapshot_index)
}

// fixed64 last_included_term = 2;
void snapshot_info::clear_last_included_term() {
  last_included_term_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 snapshot_info::last_included_term() const {
  // @@protoc_insertion_point(field_get:raft.snapshot_info.last_included_term)
  return last_included_term_;
}
void snapshot_info::set_last_included_term(::google::protobuf::uint64 value) {
  
  last_included_term_ = value;
  // @@protoc_insertion_point(field_set:raft.snapshot_info.last_included_term)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int install_snapshot_request::kReqIdFieldNumber;
const int install_snapshot_request::kTermFieldNumber;
const int install_snapshot_request::kSnapshotInfoFieldNumber;
const int install_snapshot_request::kOffsetFieldNumber;
const int install_snapshot_request::kDoneFieldNumber;
const int install_snapshot_request::kLeaderIdFieldNumber;
const int install_snapshot_request::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

install_snapshot_request::install_snapshot_request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_raft_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft.install_snapshot_request)
}
install_snapshot_request::install_snapshot_request(const install_snapshot_request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  leader_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.leader_id().size() > 0) {
    leader_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.leader_id_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.has_snapshot_info()) {
    snapshot_info_ = new ::raft::snapshot_info(*from.snapshot_info_);
  } else {
    snapshot_info_ = NULL;
  }
  ::memcpy(&req_id_, &from.req_id_,
    reinterpret_cast<char*>(&done_) -
    reinterpret_cast<char*>(&req_id_) + sizeof(done_));
  // @@protoc_insertion_point(copy_constructor:raft.install_snapshot_request)
}

void install_snapshot_request::SharedCtor() {
  leader_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&snapshot_info_, 0, reinterpret_cast<char*>(&done_) -
    reinterpret_cast<char*>(&snapshot_info_) + sizeof(done_));
  _cached_size_ = 0;
}

install_snapshot_request::~install_snapshot_request() {
  // @@protoc_insertion_point(destructor:raft.install_snapshot_request)
  SharedDtor();
}

void install_snapshot_request::SharedDtor() {
  leader_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete snapshot_info_;
  }
}

void install_snapshot_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* install_snapshot_request::descriptor() {
  protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_raft_2eproto::file_level_metadata[6].descriptor;
}

const install_snapshot_request& install_snapshot_request::default_instance() {
  protobuf_raft_2eproto::InitDefaults();
  return *internal_default_instance();
}

install_snapshot_request* install_snapshot_request::New(::google::protobuf::Arena* arena) const {
  install_snapshot_request* n = new install_snapshot_request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void install_snapshot_request::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.install_snapshot_request)
  leader_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && snapshot_info_ != NULL) {
    delete snapshot_info_;
  }
  snapshot_info_ = NULL;
  ::memset(&req_id_, 0, reinterpret_cast<char*>(&done_) -
    reinterpret_cast<char*>(&req_id_) + sizeof(done_));
}

bool install_snapshot_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft.install_snapshot_request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 req_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &req_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 term = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .raft.snapshot_info snapshot_info = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_snapshot_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 offset = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool done = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &done_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string leader_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leader_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->leader_id().data(), this->leader_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "raft.install_snapshot_request.leader_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string data = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "raft.install_snapshot_request.data"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft.install_snapshot_request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft.install_snapshot_request)
  return false;
#undef DO_
}

void install_snapshot_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft.install_snapshot_request)
  // uint64 req_id = 1;
  if (this->req_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->req_id(), output);
  }

  // uint64 term = 2;
  if (this->term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->term(), output);
  }

  // .raft.snapshot_info snapshot_info = 3;
  if (this->has_snapshot_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->snapshot_info_, output);
  }

  // uint64 offset = 4;
  if (this->offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->offset(), output);
  }

  // bool done = 5;
  if (this->done() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->done(), output);
  }

  // string leader_id = 6;
  if (this->leader_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->leader_id().data(), this->leader_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "raft.install_snapshot_request.leader_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->leader_id(), output);
  }

  // string data = 7;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "raft.install_snapshot_request.data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:raft.install_snapshot_request)
}

::google::protobuf::uint8* install_snapshot_request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft.install_snapshot_request)
  // uint64 req_id = 1;
  if (this->req_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->req_id(), target);
  }

  // uint64 term = 2;
  if (this->term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->term(), target);
  }

  // .raft.snapshot_info snapshot_info = 3;
  if (this->has_snapshot_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->snapshot_info_, false, target);
  }

  // uint64 offset = 4;
  if (this->offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->offset(), target);
  }

  // bool done = 5;
  if (this->done() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->done(), target);
  }

  // string leader_id = 6;
  if (this->leader_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->leader_id().data(), this->leader_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "raft.install_snapshot_request.leader_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->leader_id(), target);
  }

  // string data = 7;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "raft.install_snapshot_request.data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:raft.install_snapshot_request)
  return target;
}

size_t install_snapshot_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.install_snapshot_request)
  size_t total_size = 0;

  // string leader_id = 6;
  if (this->leader_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->leader_id());
  }

  // string data = 7;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data());
  }

  // .raft.snapshot_info snapshot_info = 3;
  if (this->has_snapshot_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->snapshot_info_);
  }

  // uint64 req_id = 1;
  if (this->req_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->req_id());
  }

  // uint64 term = 2;
  if (this->term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->term());
  }

  // uint64 offset = 4;
  if (this->offset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->offset());
  }

  // bool done = 5;
  if (this->done() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void install_snapshot_request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft.install_snapshot_request)
  GOOGLE_DCHECK_NE(&from, this);
  const install_snapshot_request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const install_snapshot_request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft.install_snapshot_request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft.install_snapshot_request)
    MergeFrom(*source);
  }
}

void install_snapshot_request::MergeFrom(const install_snapshot_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft.install_snapshot_request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.leader_id().size() > 0) {

    leader_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.leader_id_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.has_snapshot_info()) {
    mutable_snapshot_info()->::raft::snapshot_info::MergeFrom(from.snapshot_info());
  }
  if (from.req_id() != 0) {
    set_req_id(from.req_id());
  }
  if (from.term() != 0) {
    set_term(from.term());
  }
  if (from.offset() != 0) {
    set_offset(from.offset());
  }
  if (from.done() != 0) {
    set_done(from.done());
  }
}

void install_snapshot_request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft.install_snapshot_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void install_snapshot_request::CopyFrom(const install_snapshot_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.install_snapshot_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool install_snapshot_request::IsInitialized() const {
  return true;
}

void install_snapshot_request::Swap(install_snapshot_request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void install_snapshot_request::InternalSwap(install_snapshot_request* other) {
  leader_id_.Swap(&other->leader_id_);
  data_.Swap(&other->data_);
  std::swap(snapshot_info_, other->snapshot_info_);
  std::swap(req_id_, other->req_id_);
  std::swap(term_, other->term_);
  std::swap(offset_, other->offset_);
  std::swap(done_, other->done_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata install_snapshot_request::GetMetadata() const {
  protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_raft_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// install_snapshot_request

// uint64 req_id = 1;
void install_snapshot_request::clear_req_id() {
  req_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 install_snapshot_request::req_id() const {
  // @@protoc_insertion_point(field_get:raft.install_snapshot_request.req_id)
  return req_id_;
}
void install_snapshot_request::set_req_id(::google::protobuf::uint64 value) {
  
  req_id_ = value;
  // @@protoc_insertion_point(field_set:raft.install_snapshot_request.req_id)
}

// uint64 term = 2;
void install_snapshot_request::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 install_snapshot_request::term() const {
  // @@protoc_insertion_point(field_get:raft.install_snapshot_request.term)
  return term_;
}
void install_snapshot_request::set_term(::google::protobuf::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:raft.install_snapshot_request.term)
}

// .raft.snapshot_info snapshot_info = 3;
bool install_snapshot_request::has_snapshot_info() const {
  return this != internal_default_instance() && snapshot_info_ != NULL;
}
void install_snapshot_request::clear_snapshot_info() {
  if (GetArenaNoVirtual() == NULL && snapshot_info_ != NULL) delete snapshot_info_;
  snapshot_info_ = NULL;
}
const ::raft::snapshot_info& install_snapshot_request::snapshot_info() const {
  // @@protoc_insertion_point(field_get:raft.install_snapshot_request.snapshot_info)
  return snapshot_info_ != NULL ? *snapshot_info_
                         : *::raft::snapshot_info::internal_default_instance();
}
::raft::snapshot_info* install_snapshot_request::mutable_snapshot_info() {
  
  if (snapshot_info_ == NULL) {
    snapshot_info_ = new ::raft::snapshot_info;
  }
  // @@protoc_insertion_point(field_mutable:raft.install_snapshot_request.snapshot_info)
  return snapshot_info_;
}
::raft::snapshot_info* install_snapshot_request::release_snapshot_info() {
  // @@protoc_insertion_point(field_release:raft.install_snapshot_request.snapshot_info)
  
  ::raft::snapshot_info* temp = snapshot_info_;
  snapshot_info_ = NULL;
  return temp;
}
void install_snapshot_request::set_allocated_snapshot_info(::raft::snapshot_info* snapshot_info) {
  delete snapshot_info_;
  snapshot_info_ = snapshot_info;
  if (snapshot_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft.install_snapshot_request.snapshot_info)
}

// uint64 offset = 4;
void install_snapshot_request::clear_offset() {
  offset_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 install_snapshot_request::offset() const {
  // @@protoc_insertion_point(field_get:raft.install_snapshot_request.offset)
  return offset_;
}
void install_snapshot_request::set_offset(::google::protobuf::uint64 value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:raft.install_snapshot_request.offset)
}

// bool done = 5;
void install_snapshot_request::clear_done() {
  done_ = false;
}
bool install_snapshot_request::done() const {
  // @@protoc_insertion_point(field_get:raft.install_snapshot_request.done)
  return done_;
}
void install_snapshot_request::set_done(bool value) {
  
  done_ = value;
  // @@protoc_insertion_point(field_set:raft.install_snapshot_request.done)
}

// string leader_id = 6;
void install_snapshot_request::clear_leader_id() {
  leader_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& install_snapshot_request::leader_id() const {
  // @@protoc_insertion_point(field_get:raft.install_snapshot_request.leader_id)
  return leader_id_.GetNoArena();
}
void install_snapshot_request::set_leader_id(const ::std::string& value) {
  
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft.install_snapshot_request.leader_id)
}
#if LANG_CXX11
void install_snapshot_request::set_leader_id(::std::string&& value) {
  
  leader_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raft.install_snapshot_request.leader_id)
}
#endif
void install_snapshot_request::set_leader_id(const char* value) {
  
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft.install_snapshot_request.leader_id)
}
void install_snapshot_request::set_leader_id(const char* value, size_t size) {
  
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft.install_snapshot_request.leader_id)
}
::std::string* install_snapshot_request::mutable_leader_id() {
  
  // @@protoc_insertion_point(field_mutable:raft.install_snapshot_request.leader_id)
  return leader_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* install_snapshot_request::release_leader_id() {
  // @@protoc_insertion_point(field_release:raft.install_snapshot_request.leader_id)
  
  return leader_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void install_snapshot_request::set_allocated_leader_id(::std::string* leader_id) {
  if (leader_id != NULL) {
    
  } else {
    
  }
  leader_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), leader_id);
  // @@protoc_insertion_point(field_set_allocated:raft.install_snapshot_request.leader_id)
}

// string data = 7;
void install_snapshot_request::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& install_snapshot_request::data() const {
  // @@protoc_insertion_point(field_get:raft.install_snapshot_request.data)
  return data_.GetNoArena();
}
void install_snapshot_request::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft.install_snapshot_request.data)
}
#if LANG_CXX11
void install_snapshot_request::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raft.install_snapshot_request.data)
}
#endif
void install_snapshot_request::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft.install_snapshot_request.data)
}
void install_snapshot_request::set_data(const char* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft.install_snapshot_request.data)
}
::std::string* install_snapshot_request::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:raft.install_snapshot_request.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* install_snapshot_request::release_data() {
  // @@protoc_insertion_point(field_release:raft.install_snapshot_request.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void install_snapshot_request::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:raft.install_snapshot_request.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int install_snapshot_response::kReqIdFieldNumber;
const int install_snapshot_response::kTermFieldNumber;
const int install_snapshot_response::kBytesStoredFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

install_snapshot_response::install_snapshot_response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_raft_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft.install_snapshot_response)
}
install_snapshot_response::install_snapshot_response(const install_snapshot_response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&req_id_, &from.req_id_,
    reinterpret_cast<char*>(&bytes_stored_) -
    reinterpret_cast<char*>(&req_id_) + sizeof(bytes_stored_));
  // @@protoc_insertion_point(copy_constructor:raft.install_snapshot_response)
}

void install_snapshot_response::SharedCtor() {
  ::memset(&req_id_, 0, reinterpret_cast<char*>(&bytes_stored_) -
    reinterpret_cast<char*>(&req_id_) + sizeof(bytes_stored_));
  _cached_size_ = 0;
}

install_snapshot_response::~install_snapshot_response() {
  // @@protoc_insertion_point(destructor:raft.install_snapshot_response)
  SharedDtor();
}

void install_snapshot_response::SharedDtor() {
}

void install_snapshot_response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* install_snapshot_response::descriptor() {
  protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_raft_2eproto::file_level_metadata[7].descriptor;
}

const install_snapshot_response& install_snapshot_response::default_instance() {
  protobuf_raft_2eproto::InitDefaults();
  return *internal_default_instance();
}

install_snapshot_response* install_snapshot_response::New(::google::protobuf::Arena* arena) const {
  install_snapshot_response* n = new install_snapshot_response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void install_snapshot_response::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.install_snapshot_response)
  ::memset(&req_id_, 0, reinterpret_cast<char*>(&bytes_stored_) -
    reinterpret_cast<char*>(&req_id_) + sizeof(bytes_stored_));
}

bool install_snapshot_response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft.install_snapshot_response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 req_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &req_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 term = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 bytes_stored = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_stored_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft.install_snapshot_response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft.install_snapshot_response)
  return false;
#undef DO_
}

void install_snapshot_response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft.install_snapshot_response)
  // uint64 req_id = 1;
  if (this->req_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->req_id(), output);
  }

  // uint64 term = 2;
  if (this->term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->term(), output);
  }

  // uint64 bytes_stored = 3;
  if (this->bytes_stored() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->bytes_stored(), output);
  }

  // @@protoc_insertion_point(serialize_end:raft.install_snapshot_response)
}

::google::protobuf::uint8* install_snapshot_response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft.install_snapshot_response)
  // uint64 req_id = 1;
  if (this->req_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->req_id(), target);
  }

  // uint64 term = 2;
  if (this->term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->term(), target);
  }

  // uint64 bytes_stored = 3;
  if (this->bytes_stored() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->bytes_stored(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:raft.install_snapshot_response)
  return target;
}

size_t install_snapshot_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.install_snapshot_response)
  size_t total_size = 0;

  // uint64 req_id = 1;
  if (this->req_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->req_id());
  }

  // uint64 term = 2;
  if (this->term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->term());
  }

  // uint64 bytes_stored = 3;
  if (this->bytes_stored() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->bytes_stored());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void install_snapshot_response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft.install_snapshot_response)
  GOOGLE_DCHECK_NE(&from, this);
  const install_snapshot_response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const install_snapshot_response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft.install_snapshot_response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft.install_snapshot_response)
    MergeFrom(*source);
  }
}

void install_snapshot_response::MergeFrom(const install_snapshot_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft.install_snapshot_response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.req_id() != 0) {
    set_req_id(from.req_id());
  }
  if (from.term() != 0) {
    set_term(from.term());
  }
  if (from.bytes_stored() != 0) {
    set_bytes_stored(from.bytes_stored());
  }
}

void install_snapshot_response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft.install_snapshot_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void install_snapshot_response::CopyFrom(const install_snapshot_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.install_snapshot_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool install_snapshot_response::IsInitialized() const {
  return true;
}

void install_snapshot_response::Swap(install_snapshot_response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void install_snapshot_response::InternalSwap(install_snapshot_response* other) {
  std::swap(req_id_, other->req_id_);
  std::swap(term_, other->term_);
  std::swap(bytes_stored_, other->bytes_stored_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata install_snapshot_response::GetMetadata() const {
  protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_raft_2eproto::file_level_metadata[7];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// install_snapshot_response

// uint64 req_id = 1;
void install_snapshot_response::clear_req_id() {
  req_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 install_snapshot_response::req_id() const {
  // @@protoc_insertion_point(field_get:raft.install_snapshot_response.req_id)
  return req_id_;
}
void install_snapshot_response::set_req_id(::google::protobuf::uint64 value) {
  
  req_id_ = value;
  // @@protoc_insertion_point(field_set:raft.install_snapshot_response.req_id)
}

// uint64 term = 2;
void install_snapshot_response::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 install_snapshot_response::term() const {
  // @@protoc_insertion_point(field_get:raft.install_snapshot_response.term)
  return term_;
}
void install_snapshot_response::set_term(::google::protobuf::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:raft.install_snapshot_response.term)
}

// uint64 bytes_stored = 3;
void install_snapshot_response::clear_bytes_stored() {
  bytes_stored_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 install_snapshot_response::bytes_stored() const {
  // @@protoc_insertion_point(field_get:raft.install_snapshot_response.bytes_stored)
  return bytes_stored_;
}
void install_snapshot_response::set_bytes_stored(::google::protobuf::uint64 value) {
  
  bytes_stored_ = value;
  // @@protoc_insertion_point(field_set:raft.install_snapshot_response.bytes_stored)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace raft

// @@protoc_insertion_point(global_scope)
